using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace Robowire.RobOrm.Core.Migration.Internal
{
    public sealed class MigrationHashBuilder : IMigrationScriptBuilder 
    {
        private readonly List<string> m_tables = new List<string>();
        private readonly List<string> m_columns = new List<string>();
        private readonly List<string> m_keys = new List<string>();
        private readonly List<string> m_customScripts = new List<string>();

        public void CreateTable(string tableName, string pkColumnName, Type pkColumnType, bool pkAutogenerated)
        {
            m_tables.Add(tableName);
            CreateColumn(tableName, pkColumnName, pkColumnType.ToString(), pkAutogenerated, true);
        }

        public void CreateColumn(string tableName, string columnName, string columnType, bool allowsNulls, bool unique)
        {
            m_columns.Add($"{tableName}.{columnName}|{columnType}|{allowsNulls}|{unique}");
        }
        
        public void CreateForeignKey(
            string referringTableName,
            string referringColumnName,
            string referredTableName,
            string referredColumnName)
        {
            m_keys.Add($"{referringTableName}.{referringColumnName}:{referredTableName}.{referredColumnName}");
        }

        public void AddCustomScript(string beforeMigration, string afterMigration)
        {
            if (!string.IsNullOrWhiteSpace(beforeMigration))
            {
                m_customScripts.Add($"beforeMigration:{beforeMigration}");
            }

            if (!string.IsNullOrWhiteSpace(afterMigration))
            {
                m_customScripts.Add($"afterMigration:{afterMigration}");
            }
        }

        public string GetHash()
        {
            m_tables.Sort();
            m_columns.Sort();
            m_keys.Sort();
            m_customScripts.Sort();

            Action<IEnumerable<string>, MemoryStream> add = (list, stream) =>
                {
                    foreach (var i in list)
                    {
                        var bytes = Encoding.ASCII.GetBytes(i);
                        stream.Write(bytes, 0, bytes.Length);
                    }
                };

            using (var strm = new MemoryStream())
            {
                add(m_tables, strm);
                add(m_columns, strm);
                add(m_keys, strm);
                add(m_customScripts, strm);

                strm.Flush();
                strm.Seek(0, SeekOrigin.Begin);

                byte[] hashBytes;
                using (var md5 = new MD5CryptoServiceProvider())
                {
                    md5.Initialize();
                    hashBytes = md5.ComputeHash(strm);
                }

                return Convert.ToBase64String(hashBytes);
            }
        }
    }
}
